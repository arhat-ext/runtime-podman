// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: peripheral.proto

// +build !noperipheral

package arhatgopb

import (
	bytes "bytes"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PeripheralEventType int32

const (
	_INVALID_PERIPHERAL_EVENT PeripheralEventType = 0
)

var PeripheralEventType_name = map[int32]string{
	0: "_INVALID_PERIPHERAL_EVENT",
}

var PeripheralEventType_value = map[string]int32{
	"_INVALID_PERIPHERAL_EVENT": 0,
}

func (PeripheralEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f764f7e9651e8ed, []int{0}
}

type TLSConfig struct {
	ServerName         string   `protobuf:"bytes,1,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	InsecureSkipVerify bool     `protobuf:"varint,2,opt,name=insecure_skip_verify,json=insecureSkipVerify,proto3" json:"insecure_skip_verify,omitempty"`
	MinVersion         uint32   `protobuf:"varint,3,opt,name=min_version,json=minVersion,proto3" json:"min_version,omitempty"`
	MaxVersion         uint32   `protobuf:"varint,4,opt,name=max_version,json=maxVersion,proto3" json:"max_version,omitempty"`
	CaCert             []byte   `protobuf:"bytes,5,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
	Cert               []byte   `protobuf:"bytes,6,opt,name=cert,proto3" json:"cert,omitempty"`
	Key                []byte   `protobuf:"bytes,7,opt,name=key,proto3" json:"key,omitempty"`
	CipherSuites       []uint32 `protobuf:"varint,8,rep,packed,name=cipher_suites,json=cipherSuites,proto3" json:"cipher_suites,omitempty"`
	NextProtos         []string `protobuf:"bytes,9,rep,name=next_protos,json=nextProtos,proto3" json:"next_protos,omitempty"`
}

func (m *TLSConfig) Reset()      { *m = TLSConfig{} }
func (*TLSConfig) ProtoMessage() {}
func (*TLSConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f764f7e9651e8ed, []int{0}
}
func (m *TLSConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLSConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLSConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLSConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSConfig.Merge(m, src)
}
func (m *TLSConfig) XXX_Size() int {
	return m.Size()
}
func (m *TLSConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TLSConfig proto.InternalMessageInfo

func (m *TLSConfig) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

func (m *TLSConfig) GetInsecureSkipVerify() bool {
	if m != nil {
		return m.InsecureSkipVerify
	}
	return false
}

func (m *TLSConfig) GetMinVersion() uint32 {
	if m != nil {
		return m.MinVersion
	}
	return 0
}

func (m *TLSConfig) GetMaxVersion() uint32 {
	if m != nil {
		return m.MaxVersion
	}
	return 0
}

func (m *TLSConfig) GetCaCert() []byte {
	if m != nil {
		return m.CaCert
	}
	return nil
}

func (m *TLSConfig) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *TLSConfig) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *TLSConfig) GetCipherSuites() []uint32 {
	if m != nil {
		return m.CipherSuites
	}
	return nil
}

func (m *TLSConfig) GetNextProtos() []string {
	if m != nil {
		return m.NextProtos
	}
	return nil
}

type PeripheralConnectCmd struct {
	Target string            `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Params map[string]string `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tls    *TLSConfig        `protobuf:"bytes,3,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (m *PeripheralConnectCmd) Reset()      { *m = PeripheralConnectCmd{} }
func (*PeripheralConnectCmd) ProtoMessage() {}
func (*PeripheralConnectCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f764f7e9651e8ed, []int{1}
}
func (m *PeripheralConnectCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeripheralConnectCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeripheralConnectCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeripheralConnectCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeripheralConnectCmd.Merge(m, src)
}
func (m *PeripheralConnectCmd) XXX_Size() int {
	return m.Size()
}
func (m *PeripheralConnectCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_PeripheralConnectCmd.DiscardUnknown(m)
}

var xxx_messageInfo_PeripheralConnectCmd proto.InternalMessageInfo

func (m *PeripheralConnectCmd) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *PeripheralConnectCmd) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *PeripheralConnectCmd) GetTls() *TLSConfig {
	if m != nil {
		return m.Tls
	}
	return nil
}

type PeripheralOperateCmd struct {
	Params map[string]string `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// (optional) operation data
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *PeripheralOperateCmd) Reset()      { *m = PeripheralOperateCmd{} }
func (*PeripheralOperateCmd) ProtoMessage() {}
func (*PeripheralOperateCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f764f7e9651e8ed, []int{2}
}
func (m *PeripheralOperateCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeripheralOperateCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeripheralOperateCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeripheralOperateCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeripheralOperateCmd.Merge(m, src)
}
func (m *PeripheralOperateCmd) XXX_Size() int {
	return m.Size()
}
func (m *PeripheralOperateCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_PeripheralOperateCmd.DiscardUnknown(m)
}

var xxx_messageInfo_PeripheralOperateCmd proto.InternalMessageInfo

func (m *PeripheralOperateCmd) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *PeripheralOperateCmd) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type PeripheralMetricsCollectCmd struct {
	Params map[string]string `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *PeripheralMetricsCollectCmd) Reset()      { *m = PeripheralMetricsCollectCmd{} }
func (*PeripheralMetricsCollectCmd) ProtoMessage() {}
func (*PeripheralMetricsCollectCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f764f7e9651e8ed, []int{3}
}
func (m *PeripheralMetricsCollectCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeripheralMetricsCollectCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeripheralMetricsCollectCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeripheralMetricsCollectCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeripheralMetricsCollectCmd.Merge(m, src)
}
func (m *PeripheralMetricsCollectCmd) XXX_Size() int {
	return m.Size()
}
func (m *PeripheralMetricsCollectCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_PeripheralMetricsCollectCmd.DiscardUnknown(m)
}

var xxx_messageInfo_PeripheralMetricsCollectCmd proto.InternalMessageInfo

func (m *PeripheralMetricsCollectCmd) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

type PeripheralCloseCmd struct {
}

func (m *PeripheralCloseCmd) Reset()      { *m = PeripheralCloseCmd{} }
func (*PeripheralCloseCmd) ProtoMessage() {}
func (*PeripheralCloseCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f764f7e9651e8ed, []int{4}
}
func (m *PeripheralCloseCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeripheralCloseCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeripheralCloseCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeripheralCloseCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeripheralCloseCmd.Merge(m, src)
}
func (m *PeripheralCloseCmd) XXX_Size() int {
	return m.Size()
}
func (m *PeripheralCloseCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_PeripheralCloseCmd.DiscardUnknown(m)
}

var xxx_messageInfo_PeripheralCloseCmd proto.InternalMessageInfo

type PeripheralOperationResultMsg struct {
	Result [][]byte `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (m *PeripheralOperationResultMsg) Reset()      { *m = PeripheralOperationResultMsg{} }
func (*PeripheralOperationResultMsg) ProtoMessage() {}
func (*PeripheralOperationResultMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f764f7e9651e8ed, []int{5}
}
func (m *PeripheralOperationResultMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeripheralOperationResultMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeripheralOperationResultMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeripheralOperationResultMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeripheralOperationResultMsg.Merge(m, src)
}
func (m *PeripheralOperationResultMsg) XXX_Size() int {
	return m.Size()
}
func (m *PeripheralOperationResultMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_PeripheralOperationResultMsg.DiscardUnknown(m)
}

var xxx_messageInfo_PeripheralOperationResultMsg proto.InternalMessageInfo

func (m *PeripheralOperationResultMsg) GetResult() [][]byte {
	if m != nil {
		return m.Result
	}
	return nil
}

type PeripheralMetricsMsg struct {
	Values []*PeripheralMetricsMsg_Value `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *PeripheralMetricsMsg) Reset()      { *m = PeripheralMetricsMsg{} }
func (*PeripheralMetricsMsg) ProtoMessage() {}
func (*PeripheralMetricsMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f764f7e9651e8ed, []int{6}
}
func (m *PeripheralMetricsMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeripheralMetricsMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeripheralMetricsMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeripheralMetricsMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeripheralMetricsMsg.Merge(m, src)
}
func (m *PeripheralMetricsMsg) XXX_Size() int {
	return m.Size()
}
func (m *PeripheralMetricsMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_PeripheralMetricsMsg.DiscardUnknown(m)
}

var xxx_messageInfo_PeripheralMetricsMsg proto.InternalMessageInfo

func (m *PeripheralMetricsMsg) GetValues() []*PeripheralMetricsMsg_Value {
	if m != nil {
		return m.Values
	}
	return nil
}

type PeripheralMetricsMsg_Value struct {
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	// unix timestamp
	Timestamp int64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *PeripheralMetricsMsg_Value) Reset()      { *m = PeripheralMetricsMsg_Value{} }
func (*PeripheralMetricsMsg_Value) ProtoMessage() {}
func (*PeripheralMetricsMsg_Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f764f7e9651e8ed, []int{6, 0}
}
func (m *PeripheralMetricsMsg_Value) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeripheralMetricsMsg_Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeripheralMetricsMsg_Value.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeripheralMetricsMsg_Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeripheralMetricsMsg_Value.Merge(m, src)
}
func (m *PeripheralMetricsMsg_Value) XXX_Size() int {
	return m.Size()
}
func (m *PeripheralMetricsMsg_Value) XXX_DiscardUnknown() {
	xxx_messageInfo_PeripheralMetricsMsg_Value.DiscardUnknown(m)
}

var xxx_messageInfo_PeripheralMetricsMsg_Value proto.InternalMessageInfo

func (m *PeripheralMetricsMsg_Value) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *PeripheralMetricsMsg_Value) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type PeripheralEventMsg struct {
	Kind PeripheralEventType `protobuf:"varint,1,opt,name=kind,proto3,enum=arhat.PeripheralEventType" json:"kind,omitempty"`
}

func (m *PeripheralEventMsg) Reset()      { *m = PeripheralEventMsg{} }
func (*PeripheralEventMsg) ProtoMessage() {}
func (*PeripheralEventMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f764f7e9651e8ed, []int{7}
}
func (m *PeripheralEventMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeripheralEventMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeripheralEventMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeripheralEventMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeripheralEventMsg.Merge(m, src)
}
func (m *PeripheralEventMsg) XXX_Size() int {
	return m.Size()
}
func (m *PeripheralEventMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_PeripheralEventMsg.DiscardUnknown(m)
}

var xxx_messageInfo_PeripheralEventMsg proto.InternalMessageInfo

func (m *PeripheralEventMsg) GetKind() PeripheralEventType {
	if m != nil {
		return m.Kind
	}
	return _INVALID_PERIPHERAL_EVENT
}

func init() {
	proto.RegisterEnum("arhat.PeripheralEventType", PeripheralEventType_name, PeripheralEventType_value)
	proto.RegisterType((*TLSConfig)(nil), "arhat.TLSConfig")
	proto.RegisterType((*PeripheralConnectCmd)(nil), "arhat.PeripheralConnectCmd")
	proto.RegisterMapType((map[string]string)(nil), "arhat.PeripheralConnectCmd.ParamsEntry")
	proto.RegisterType((*PeripheralOperateCmd)(nil), "arhat.PeripheralOperateCmd")
	proto.RegisterMapType((map[string]string)(nil), "arhat.PeripheralOperateCmd.ParamsEntry")
	proto.RegisterType((*PeripheralMetricsCollectCmd)(nil), "arhat.PeripheralMetricsCollectCmd")
	proto.RegisterMapType((map[string]string)(nil), "arhat.PeripheralMetricsCollectCmd.ParamsEntry")
	proto.RegisterType((*PeripheralCloseCmd)(nil), "arhat.PeripheralCloseCmd")
	proto.RegisterType((*PeripheralOperationResultMsg)(nil), "arhat.PeripheralOperationResultMsg")
	proto.RegisterType((*PeripheralMetricsMsg)(nil), "arhat.PeripheralMetricsMsg")
	proto.RegisterType((*PeripheralMetricsMsg_Value)(nil), "arhat.PeripheralMetricsMsg.Value")
	proto.RegisterType((*PeripheralEventMsg)(nil), "arhat.PeripheralEventMsg")
}

func init() { proto.RegisterFile("peripheral.proto", fileDescriptor_8f764f7e9651e8ed) }

var fileDescriptor_8f764f7e9651e8ed = []byte{
	// 667 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0x3d, 0x6f, 0x13, 0x4b,
	0x14, 0xf5, 0xf8, 0x2b, 0xf1, 0xd8, 0x79, 0xb2, 0xe6, 0x59, 0xef, 0xed, 0xcb, 0x0b, 0x1b, 0x63,
	0x0a, 0x2c, 0x24, 0x16, 0x14, 0x10, 0x22, 0x50, 0xa0, 0xe0, 0x18, 0x11, 0x29, 0x09, 0xd6, 0x24,
	0xb8, 0xa0, 0x59, 0x4d, 0xd6, 0x13, 0x67, 0xe4, 0xfd, 0xd2, 0xcc, 0xd8, 0x8a, 0x3b, 0x7e, 0x01,
	0xe2, 0x27, 0xd0, 0x80, 0xf8, 0x29, 0x54, 0x28, 0x65, 0x4a, 0xb2, 0x69, 0x28, 0xf3, 0x13, 0xd0,
	0xde, 0x5d, 0xc7, 0xf9, 0x70, 0xaa, 0x74, 0x77, 0xce, 0x3d, 0x77, 0xe6, 0x9c, 0x73, 0x77, 0x71,
	0x35, 0xe4, 0x52, 0x84, 0x07, 0x5c, 0x32, 0xd7, 0x0a, 0x65, 0xa0, 0x03, 0x52, 0x60, 0xf2, 0x80,
	0xe9, 0xc6, 0xd7, 0x2c, 0x2e, 0xed, 0x6e, 0xee, 0xb4, 0x02, 0x7f, 0x5f, 0xf4, 0xc9, 0x32, 0x2e,
	0x2b, 0x2e, 0x47, 0x5c, 0xda, 0x3e, 0xf3, 0xb8, 0x81, 0xea, 0xa8, 0x59, 0xa2, 0x38, 0x81, 0xb6,
	0x99, 0xc7, 0xc9, 0x63, 0x5c, 0x13, 0xbe, 0xe2, 0xce, 0x50, 0x72, 0x5b, 0x0d, 0x44, 0x68, 0x8f,
	0xb8, 0x14, 0xfb, 0x63, 0x23, 0x5b, 0x47, 0xcd, 0x79, 0x4a, 0x26, 0xbd, 0x9d, 0x81, 0x08, 0xbb,
	0xd0, 0x89, 0xaf, 0xf4, 0x84, 0x1f, 0xf3, 0x94, 0x08, 0x7c, 0x23, 0x57, 0x47, 0xcd, 0x05, 0x8a,
	0x3d, 0xe1, 0x77, 0x13, 0x04, 0x08, 0xec, 0xf0, 0x9c, 0x90, 0x4f, 0x09, 0xec, 0x70, 0x42, 0xf8,
	0x17, 0xcf, 0x39, 0xcc, 0x76, 0xb8, 0xd4, 0x46, 0xa1, 0x8e, 0x9a, 0x15, 0x5a, 0x74, 0x58, 0x8b,
	0x4b, 0x4d, 0x08, 0xce, 0x03, 0x5a, 0x04, 0x14, 0x6a, 0x52, 0xc5, 0xb9, 0x01, 0x1f, 0x1b, 0x73,
	0x00, 0xc5, 0x25, 0xb9, 0x87, 0x17, 0x1c, 0xb0, 0x6e, 0xab, 0xa1, 0xd0, 0x5c, 0x19, 0xf3, 0xf5,
	0x5c, 0x73, 0x81, 0x56, 0x12, 0x70, 0x07, 0xb0, 0x58, 0x84, 0xcf, 0x0f, 0xb5, 0x0d, 0xd9, 0x28,
	0xa3, 0x54, 0xcf, 0xc5, 0xc6, 0x63, 0xa8, 0x03, 0x48, 0xe3, 0x27, 0xc2, 0xb5, 0xce, 0x79, 0x86,
	0xad, 0xc0, 0xf7, 0xb9, 0xa3, 0x5b, 0x5e, 0x8f, 0xfc, 0x83, 0x8b, 0x9a, 0xc9, 0x3e, 0xd7, 0x69,
	0x5a, 0xe9, 0x89, 0xbc, 0xc2, 0xc5, 0x90, 0x49, 0xe6, 0x29, 0x23, 0x5b, 0xcf, 0x35, 0xcb, 0x2b,
	0xf7, 0x2d, 0x08, 0xdc, 0x9a, 0x75, 0x89, 0xd5, 0x01, 0x66, 0xdb, 0xd7, 0x72, 0x4c, 0xd3, 0x31,
	0xd2, 0xc0, 0x39, 0xed, 0x2a, 0x08, 0xac, 0xbc, 0x52, 0x4d, 0xa7, 0xcf, 0x57, 0x45, 0xe3, 0xe6,
	0xe2, 0x2a, 0x2e, 0x5f, 0x18, 0x9d, 0x98, 0x4f, 0x84, 0x80, 0xf9, 0x1a, 0x2e, 0x8c, 0x98, 0x3b,
	0xe4, 0xb0, 0xa0, 0x12, 0x4d, 0x0e, 0x2f, 0xb2, 0xcf, 0x51, 0xe3, 0xdb, 0x25, 0x43, 0xef, 0x42,
	0x2e, 0x99, 0xe6, 0xb1, 0xa1, 0xa9, 0x70, 0x74, 0x83, 0xf0, 0x29, 0x79, 0xa6, 0x70, 0x82, 0xf3,
	0x3d, 0xa6, 0x19, 0x3c, 0x59, 0xa1, 0x50, 0xdf, 0x46, 0xe8, 0x17, 0x84, 0xff, 0x9f, 0xbe, 0xbd,
	0xc5, 0xb5, 0x14, 0x8e, 0x6a, 0x05, 0xae, 0x9b, 0x2e, 0xe0, 0xcd, 0x15, 0xbd, 0xd6, 0x35, 0xbd,
	0xd7, 0x66, 0x66, 0xc9, 0xbe, 0x8d, 0xc4, 0x1a, 0x26, 0x17, 0xd6, 0xea, 0x06, 0x2a, 0xce, 0xa6,
	0xf1, 0x0c, 0x2f, 0x5d, 0xcd, 0x4c, 0x04, 0x3e, 0xe5, 0x6a, 0xe8, 0xea, 0x2d, 0xd5, 0x8f, 0xbf,
	0x1c, 0x09, 0x07, 0x10, 0x5e, 0xa1, 0xe9, 0xa9, 0xf1, 0xe9, 0xd2, 0x66, 0x52, 0xf1, 0xf1, 0xc0,
	0x2a, 0x2e, 0xc2, 0x9b, 0x13, 0xa7, 0x77, 0x6f, 0x72, 0xba, 0xa5, 0xfa, 0x56, 0x37, 0x66, 0xd2,
	0x74, 0x60, 0xf1, 0x25, 0x2e, 0x00, 0x30, 0x35, 0x11, 0x1b, 0x43, 0xa9, 0x09, 0xb2, 0x84, 0x4b,
	0x5a, 0x78, 0x5c, 0x69, 0xe6, 0x85, 0x60, 0x2f, 0x47, 0xa7, 0x40, 0x63, 0xfd, 0xa2, 0xbd, 0xf6,
	0x88, 0xfb, 0x20, 0xdf, 0xc2, 0xf9, 0x81, 0xf0, 0x7b, 0x70, 0xd1, 0x5f, 0x2b, 0x8b, 0xd7, 0xb4,
	0x00, 0x71, 0x77, 0x1c, 0x72, 0x0a, 0xbc, 0x07, 0x4f, 0xf1, 0xdf, 0x33, 0x9a, 0xe4, 0x0e, 0xfe,
	0xcf, 0xde, 0xd8, 0xee, 0xae, 0x6d, 0x6e, 0xac, 0xdb, 0x9d, 0x36, 0xdd, 0xe8, 0xbc, 0x6d, 0xd3,
	0xb5, 0x4d, 0xbb, 0xdd, 0x6d, 0x6f, 0xef, 0x56, 0x33, 0xaf, 0xdf, 0x1f, 0x9d, 0x98, 0x99, 0xe3,
	0x13, 0x33, 0x73, 0x76, 0x62, 0xa2, 0x8f, 0x91, 0x89, 0xbe, 0x47, 0x26, 0xfa, 0x11, 0x99, 0xe8,
	0x28, 0x32, 0xd1, 0xaf, 0xc8, 0x44, 0xbf, 0x23, 0x33, 0x73, 0x16, 0x99, 0xe8, 0xf3, 0xa9, 0x99,
	0x39, 0x3a, 0x35, 0x33, 0xc7, 0xa7, 0x66, 0xe6, 0xc3, 0x72, 0x22, 0xa6, 0xc7, 0x47, 0x8f, 0xa0,
	0x7a, 0x08, 0xff, 0x75, 0x52, 0xf7, 0x83, 0x70, 0x6f, 0xaf, 0x08, 0xc0, 0x93, 0x3f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x98, 0x3a, 0x7f, 0xec, 0x18, 0x05, 0x00, 0x00,
}

func (x PeripheralEventType) String() string {
	s, ok := PeripheralEventType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *TLSConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TLSConfig)
	if !ok {
		that2, ok := that.(TLSConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerName != that1.ServerName {
		return false
	}
	if this.InsecureSkipVerify != that1.InsecureSkipVerify {
		return false
	}
	if this.MinVersion != that1.MinVersion {
		return false
	}
	if this.MaxVersion != that1.MaxVersion {
		return false
	}
	if !bytes.Equal(this.CaCert, that1.CaCert) {
		return false
	}
	if !bytes.Equal(this.Cert, that1.Cert) {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	if len(this.CipherSuites) != len(that1.CipherSuites) {
		return false
	}
	for i := range this.CipherSuites {
		if this.CipherSuites[i] != that1.CipherSuites[i] {
			return false
		}
	}
	if len(this.NextProtos) != len(that1.NextProtos) {
		return false
	}
	for i := range this.NextProtos {
		if this.NextProtos[i] != that1.NextProtos[i] {
			return false
		}
	}
	return true
}
func (this *PeripheralConnectCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeripheralConnectCmd)
	if !ok {
		that2, ok := that.(PeripheralConnectCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Target != that1.Target {
		return false
	}
	if len(this.Params) != len(that1.Params) {
		return false
	}
	for i := range this.Params {
		if this.Params[i] != that1.Params[i] {
			return false
		}
	}
	if !this.Tls.Equal(that1.Tls) {
		return false
	}
	return true
}
func (this *PeripheralOperateCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeripheralOperateCmd)
	if !ok {
		that2, ok := that.(PeripheralOperateCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Params) != len(that1.Params) {
		return false
	}
	for i := range this.Params {
		if this.Params[i] != that1.Params[i] {
			return false
		}
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *PeripheralMetricsCollectCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeripheralMetricsCollectCmd)
	if !ok {
		that2, ok := that.(PeripheralMetricsCollectCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Params) != len(that1.Params) {
		return false
	}
	for i := range this.Params {
		if this.Params[i] != that1.Params[i] {
			return false
		}
	}
	return true
}
func (this *PeripheralCloseCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeripheralCloseCmd)
	if !ok {
		that2, ok := that.(PeripheralCloseCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *PeripheralOperationResultMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeripheralOperationResultMsg)
	if !ok {
		that2, ok := that.(PeripheralOperationResultMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Result) != len(that1.Result) {
		return false
	}
	for i := range this.Result {
		if !bytes.Equal(this.Result[i], that1.Result[i]) {
			return false
		}
	}
	return true
}
func (this *PeripheralMetricsMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeripheralMetricsMsg)
	if !ok {
		that2, ok := that.(PeripheralMetricsMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if !this.Values[i].Equal(that1.Values[i]) {
			return false
		}
	}
	return true
}
func (this *PeripheralMetricsMsg_Value) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeripheralMetricsMsg_Value)
	if !ok {
		that2, ok := that.(PeripheralMetricsMsg_Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	return true
}
func (this *PeripheralEventMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeripheralEventMsg)
	if !ok {
		that2, ok := that.(PeripheralEventMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	return true
}
func (this *TLSConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&arhatgopb.TLSConfig{")
	s = append(s, "ServerName: "+fmt.Sprintf("%#v", this.ServerName)+",\n")
	s = append(s, "InsecureSkipVerify: "+fmt.Sprintf("%#v", this.InsecureSkipVerify)+",\n")
	s = append(s, "MinVersion: "+fmt.Sprintf("%#v", this.MinVersion)+",\n")
	s = append(s, "MaxVersion: "+fmt.Sprintf("%#v", this.MaxVersion)+",\n")
	s = append(s, "CaCert: "+fmt.Sprintf("%#v", this.CaCert)+",\n")
	s = append(s, "Cert: "+fmt.Sprintf("%#v", this.Cert)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "CipherSuites: "+fmt.Sprintf("%#v", this.CipherSuites)+",\n")
	s = append(s, "NextProtos: "+fmt.Sprintf("%#v", this.NextProtos)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeripheralConnectCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&arhatgopb.PeripheralConnectCmd{")
	s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	keysForParams := make([]string, 0, len(this.Params))
	for k, _ := range this.Params {
		keysForParams = append(keysForParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParams)
	mapStringForParams := "map[string]string{"
	for _, k := range keysForParams {
		mapStringForParams += fmt.Sprintf("%#v: %#v,", k, this.Params[k])
	}
	mapStringForParams += "}"
	if this.Params != nil {
		s = append(s, "Params: "+mapStringForParams+",\n")
	}
	if this.Tls != nil {
		s = append(s, "Tls: "+fmt.Sprintf("%#v", this.Tls)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeripheralOperateCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&arhatgopb.PeripheralOperateCmd{")
	keysForParams := make([]string, 0, len(this.Params))
	for k, _ := range this.Params {
		keysForParams = append(keysForParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParams)
	mapStringForParams := "map[string]string{"
	for _, k := range keysForParams {
		mapStringForParams += fmt.Sprintf("%#v: %#v,", k, this.Params[k])
	}
	mapStringForParams += "}"
	if this.Params != nil {
		s = append(s, "Params: "+mapStringForParams+",\n")
	}
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeripheralMetricsCollectCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&arhatgopb.PeripheralMetricsCollectCmd{")
	keysForParams := make([]string, 0, len(this.Params))
	for k, _ := range this.Params {
		keysForParams = append(keysForParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParams)
	mapStringForParams := "map[string]string{"
	for _, k := range keysForParams {
		mapStringForParams += fmt.Sprintf("%#v: %#v,", k, this.Params[k])
	}
	mapStringForParams += "}"
	if this.Params != nil {
		s = append(s, "Params: "+mapStringForParams+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeripheralCloseCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&arhatgopb.PeripheralCloseCmd{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeripheralOperationResultMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&arhatgopb.PeripheralOperationResultMsg{")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeripheralMetricsMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&arhatgopb.PeripheralMetricsMsg{")
	if this.Values != nil {
		s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeripheralMetricsMsg_Value) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&arhatgopb.PeripheralMetricsMsg_Value{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeripheralEventMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&arhatgopb.PeripheralEventMsg{")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPeripheral(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TLSConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextProtos) > 0 {
		for iNdEx := len(m.NextProtos) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NextProtos[iNdEx])
			copy(dAtA[i:], m.NextProtos[iNdEx])
			i = encodeVarintPeripheral(dAtA, i, uint64(len(m.NextProtos[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.CipherSuites) > 0 {
		dAtA2 := make([]byte, len(m.CipherSuites)*10)
		var j1 int
		for _, num := range m.CipherSuites {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintPeripheral(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintPeripheral(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Cert) > 0 {
		i -= len(m.Cert)
		copy(dAtA[i:], m.Cert)
		i = encodeVarintPeripheral(dAtA, i, uint64(len(m.Cert)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CaCert) > 0 {
		i -= len(m.CaCert)
		copy(dAtA[i:], m.CaCert)
		i = encodeVarintPeripheral(dAtA, i, uint64(len(m.CaCert)))
		i--
		dAtA[i] = 0x2a
	}
	if m.MaxVersion != 0 {
		i = encodeVarintPeripheral(dAtA, i, uint64(m.MaxVersion))
		i--
		dAtA[i] = 0x20
	}
	if m.MinVersion != 0 {
		i = encodeVarintPeripheral(dAtA, i, uint64(m.MinVersion))
		i--
		dAtA[i] = 0x18
	}
	if m.InsecureSkipVerify {
		i--
		if m.InsecureSkipVerify {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.ServerName) > 0 {
		i -= len(m.ServerName)
		copy(dAtA[i:], m.ServerName)
		i = encodeVarintPeripheral(dAtA, i, uint64(len(m.ServerName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PeripheralConnectCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeripheralConnectCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeripheralConnectCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tls != nil {
		{
			size, err := m.Tls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPeripheral(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Params) > 0 {
		for k := range m.Params {
			v := m.Params[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPeripheral(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPeripheral(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPeripheral(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintPeripheral(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PeripheralOperateCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeripheralOperateCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeripheralOperateCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintPeripheral(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Params) > 0 {
		for k := range m.Params {
			v := m.Params[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPeripheral(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPeripheral(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPeripheral(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PeripheralMetricsCollectCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeripheralMetricsCollectCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeripheralMetricsCollectCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Params) > 0 {
		for k := range m.Params {
			v := m.Params[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPeripheral(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPeripheral(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPeripheral(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PeripheralCloseCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeripheralCloseCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeripheralCloseCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PeripheralOperationResultMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeripheralOperationResultMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeripheralOperationResultMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		for iNdEx := len(m.Result) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Result[iNdEx])
			copy(dAtA[i:], m.Result[iNdEx])
			i = encodeVarintPeripheral(dAtA, i, uint64(len(m.Result[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PeripheralMetricsMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeripheralMetricsMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeripheralMetricsMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPeripheral(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PeripheralMetricsMsg_Value) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeripheralMetricsMsg_Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeripheralMetricsMsg_Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintPeripheral(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *PeripheralEventMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeripheralEventMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeripheralEventMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Kind != 0 {
		i = encodeVarintPeripheral(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPeripheral(dAtA []byte, offset int, v uint64) int {
	offset -= sovPeripheral(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TLSConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerName)
	if l > 0 {
		n += 1 + l + sovPeripheral(uint64(l))
	}
	if m.InsecureSkipVerify {
		n += 2
	}
	if m.MinVersion != 0 {
		n += 1 + sovPeripheral(uint64(m.MinVersion))
	}
	if m.MaxVersion != 0 {
		n += 1 + sovPeripheral(uint64(m.MaxVersion))
	}
	l = len(m.CaCert)
	if l > 0 {
		n += 1 + l + sovPeripheral(uint64(l))
	}
	l = len(m.Cert)
	if l > 0 {
		n += 1 + l + sovPeripheral(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovPeripheral(uint64(l))
	}
	if len(m.CipherSuites) > 0 {
		l = 0
		for _, e := range m.CipherSuites {
			l += sovPeripheral(uint64(e))
		}
		n += 1 + sovPeripheral(uint64(l)) + l
	}
	if len(m.NextProtos) > 0 {
		for _, s := range m.NextProtos {
			l = len(s)
			n += 1 + l + sovPeripheral(uint64(l))
		}
	}
	return n
}

func (m *PeripheralConnectCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovPeripheral(uint64(l))
	}
	if len(m.Params) > 0 {
		for k, v := range m.Params {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPeripheral(uint64(len(k))) + 1 + len(v) + sovPeripheral(uint64(len(v)))
			n += mapEntrySize + 1 + sovPeripheral(uint64(mapEntrySize))
		}
	}
	if m.Tls != nil {
		l = m.Tls.Size()
		n += 1 + l + sovPeripheral(uint64(l))
	}
	return n
}

func (m *PeripheralOperateCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Params) > 0 {
		for k, v := range m.Params {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPeripheral(uint64(len(k))) + 1 + len(v) + sovPeripheral(uint64(len(v)))
			n += mapEntrySize + 1 + sovPeripheral(uint64(mapEntrySize))
		}
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPeripheral(uint64(l))
	}
	return n
}

func (m *PeripheralMetricsCollectCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Params) > 0 {
		for k, v := range m.Params {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPeripheral(uint64(len(k))) + 1 + len(v) + sovPeripheral(uint64(len(v)))
			n += mapEntrySize + 1 + sovPeripheral(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *PeripheralCloseCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PeripheralOperationResultMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Result) > 0 {
		for _, b := range m.Result {
			l = len(b)
			n += 1 + l + sovPeripheral(uint64(l))
		}
	}
	return n
}

func (m *PeripheralMetricsMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovPeripheral(uint64(l))
		}
	}
	return n
}

func (m *PeripheralMetricsMsg_Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 9
	}
	if m.Timestamp != 0 {
		n += 1 + sovPeripheral(uint64(m.Timestamp))
	}
	return n
}

func (m *PeripheralEventMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovPeripheral(uint64(m.Kind))
	}
	return n
}

func sovPeripheral(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPeripheral(x uint64) (n int) {
	return sovPeripheral(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TLSConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TLSConfig{`,
		`ServerName:` + fmt.Sprintf("%v", this.ServerName) + `,`,
		`InsecureSkipVerify:` + fmt.Sprintf("%v", this.InsecureSkipVerify) + `,`,
		`MinVersion:` + fmt.Sprintf("%v", this.MinVersion) + `,`,
		`MaxVersion:` + fmt.Sprintf("%v", this.MaxVersion) + `,`,
		`CaCert:` + fmt.Sprintf("%v", this.CaCert) + `,`,
		`Cert:` + fmt.Sprintf("%v", this.Cert) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`CipherSuites:` + fmt.Sprintf("%v", this.CipherSuites) + `,`,
		`NextProtos:` + fmt.Sprintf("%v", this.NextProtos) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeripheralConnectCmd) String() string {
	if this == nil {
		return "nil"
	}
	keysForParams := make([]string, 0, len(this.Params))
	for k, _ := range this.Params {
		keysForParams = append(keysForParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParams)
	mapStringForParams := "map[string]string{"
	for _, k := range keysForParams {
		mapStringForParams += fmt.Sprintf("%v: %v,", k, this.Params[k])
	}
	mapStringForParams += "}"
	s := strings.Join([]string{`&PeripheralConnectCmd{`,
		`Target:` + fmt.Sprintf("%v", this.Target) + `,`,
		`Params:` + mapStringForParams + `,`,
		`Tls:` + strings.Replace(this.Tls.String(), "TLSConfig", "TLSConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeripheralOperateCmd) String() string {
	if this == nil {
		return "nil"
	}
	keysForParams := make([]string, 0, len(this.Params))
	for k, _ := range this.Params {
		keysForParams = append(keysForParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParams)
	mapStringForParams := "map[string]string{"
	for _, k := range keysForParams {
		mapStringForParams += fmt.Sprintf("%v: %v,", k, this.Params[k])
	}
	mapStringForParams += "}"
	s := strings.Join([]string{`&PeripheralOperateCmd{`,
		`Params:` + mapStringForParams + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeripheralMetricsCollectCmd) String() string {
	if this == nil {
		return "nil"
	}
	keysForParams := make([]string, 0, len(this.Params))
	for k, _ := range this.Params {
		keysForParams = append(keysForParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParams)
	mapStringForParams := "map[string]string{"
	for _, k := range keysForParams {
		mapStringForParams += fmt.Sprintf("%v: %v,", k, this.Params[k])
	}
	mapStringForParams += "}"
	s := strings.Join([]string{`&PeripheralMetricsCollectCmd{`,
		`Params:` + mapStringForParams + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeripheralCloseCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeripheralCloseCmd{`,
		`}`,
	}, "")
	return s
}
func (this *PeripheralOperationResultMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeripheralOperationResultMsg{`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeripheralMetricsMsg) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForValues := "[]*PeripheralMetricsMsg_Value{"
	for _, f := range this.Values {
		repeatedStringForValues += strings.Replace(fmt.Sprintf("%v", f), "PeripheralMetricsMsg_Value", "PeripheralMetricsMsg_Value", 1) + ","
	}
	repeatedStringForValues += "}"
	s := strings.Join([]string{`&PeripheralMetricsMsg{`,
		`Values:` + repeatedStringForValues + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeripheralMetricsMsg_Value) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeripheralMetricsMsg_Value{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeripheralEventMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeripheralEventMsg{`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPeripheral(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TLSConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeripheral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TLSConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TLSConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPeripheral
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPeripheral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsecureSkipVerify", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InsecureSkipVerify = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVersion", wireType)
			}
			m.MinVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxVersion", wireType)
			}
			m.MaxVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaCert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPeripheral
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPeripheral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaCert = append(m.CaCert[:0], dAtA[iNdEx:postIndex]...)
			if m.CaCert == nil {
				m.CaCert = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPeripheral
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPeripheral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cert = append(m.Cert[:0], dAtA[iNdEx:postIndex]...)
			if m.Cert == nil {
				m.Cert = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPeripheral
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPeripheral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPeripheral
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CipherSuites = append(m.CipherSuites, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPeripheral
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPeripheral
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPeripheral
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CipherSuites) == 0 {
					m.CipherSuites = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPeripheral
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CipherSuites = append(m.CipherSuites, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CipherSuites", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextProtos", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPeripheral
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPeripheral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextProtos = append(m.NextProtos, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPeripheral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPeripheral
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPeripheral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeripheralConnectCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeripheral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeripheralConnectCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeripheralConnectCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPeripheral
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPeripheral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPeripheral
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPeripheral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPeripheral
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPeripheral
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPeripheral
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPeripheral
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPeripheral
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPeripheral
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPeripheral
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPeripheral(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPeripheral
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Params[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPeripheral
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPeripheral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tls == nil {
				m.Tls = &TLSConfig{}
			}
			if err := m.Tls.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPeripheral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPeripheral
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPeripheral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeripheralOperateCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeripheral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeripheralOperateCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeripheralOperateCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPeripheral
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPeripheral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPeripheral
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPeripheral
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPeripheral
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPeripheral
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPeripheral
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPeripheral
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPeripheral
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPeripheral(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPeripheral
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Params[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPeripheral
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPeripheral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPeripheral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPeripheral
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPeripheral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeripheralMetricsCollectCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeripheral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeripheralMetricsCollectCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeripheralMetricsCollectCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPeripheral
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPeripheral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPeripheral
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPeripheral
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPeripheral
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPeripheral
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPeripheral
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPeripheral
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPeripheral
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPeripheral(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPeripheral
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Params[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPeripheral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPeripheral
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPeripheral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeripheralCloseCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeripheral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeripheralCloseCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeripheralCloseCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPeripheral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPeripheral
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPeripheral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeripheralOperationResultMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeripheral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeripheralOperationResultMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeripheralOperationResultMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPeripheral
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPeripheral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, make([]byte, postIndex-iNdEx))
			copy(m.Result[len(m.Result)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPeripheral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPeripheral
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPeripheral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeripheralMetricsMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeripheral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeripheralMetricsMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeripheralMetricsMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPeripheral
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPeripheral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &PeripheralMetricsMsg_Value{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPeripheral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPeripheral
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPeripheral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeripheralMetricsMsg_Value) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeripheral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Value: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Value: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPeripheral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPeripheral
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPeripheral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeripheralEventMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeripheral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeripheralEventMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeripheralEventMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeripheral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= PeripheralEventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPeripheral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPeripheral
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPeripheral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPeripheral(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPeripheral
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPeripheral
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPeripheral
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPeripheral
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPeripheral
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPeripheral
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPeripheral        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPeripheral          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPeripheral = fmt.Errorf("proto: unexpected end of group")
)
