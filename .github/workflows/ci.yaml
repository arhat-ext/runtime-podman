name: CI

# yamllint disable-line rule:truthy
on:
  check_run:
    types:
    - rerequested
    - requested_action
  pull_request:
    paths-ignore:
    - docs/**
    - cicd/deploy/charts/**
    - README.md
    branches:
    - master
    - "!deps/**"
  push:
    paths-ignore:
    - docs/**
    - cicd/deploy/charts/**
    - README.md
    branches:
    - master
    tags:
    - v*

env:
  GO111MODULE: "on"

defaults:
  run:
    shell: bash

jobs:
  stylecheck:
    if: contains(github.head_ref, 'deps/') == false
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: 1.15.x

    - name: Ensure tidy gomod
      run: |
        make vendor
        if ! git diff --exit-code
        then
          echo "go mod not tidy"
          exit 1
        fi

    - name: Lint
      run: |
        make lint.all

  unit-tests:
    if: contains(github.head_ref, 'deps/') == false
    container:
      image: arhatdev/builder-go:debian
    needs:
    - stylecheck
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    # - name: Install Extra Packages (for cgo deps)
    #   run: |
    #     apt update
    #     apt install -y \
    #       python3-distutils=3.7.3-1 python3-lib2to3=3.7.3-1 python3=3.7.3-1

    - name: Test Packages
      run: |
        make test.pkg

    - name: Test Commands
      run: |
        make test.cmd

    - name: Report Test Coverage
      uses: codecov/codecov-action@v1
      # with:
      #   token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
      #   fail_ci_if_error: true # optional (default = false)

  build-linux-images:
    if: contains(github.head_ref, 'deps/') == false
    needs:
    - stylecheck
    - unit-tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install qemu-static
      run: |
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

        sudo apt update
        sudo apt install -y qemu-user-static

    - name: Build and Push Images
      env:
        DOCKER_CLI_EXPERIMENTAL: enabled
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
        GITHUB_DOCKER_USERNAME: ${{ secrets.GH_PACKAGES_USER }}
        GITHUB_DOCKER_PASSWORD: ${{ secrets.GH_PACKAGES_TOKEN }}
        IMAGE_REPOS: docker.io/arhatext,ghcr.io/arhat-ext
      run: |
        docker login docker.io -u="${DOCKERHUB_USERNAME}" -p="${DOCKERHUB_PASSWORD}"
        docker login ghcr.io/arhat-ext -u="${GITHUB_DOCKER_USERNAME}" -p="${GITHUB_DOCKER_PASSWORD}"

        make image.build.linux.all
        make image.push.linux.all

  # TODO: Add support for windows image build in arhat-ext/dockerfile
  # build-windows-images:
  #   if: contains(github.head_ref, 'deps/') == false
  #   needs:
  #   - stylecheck
  #   - unit-tests
  #   runs-on: windows-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Build and Push Images
  #     env:
  #       DOCKER_CLI_EXPERIMENTAL: enabled
  #       DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  #       DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
  #       GITHUB_DOCKER_USERNAME: ${{ secrets.GH_PACKAGES_USER }}
  #       GITHUB_DOCKER_PASSWORD: ${{ secrets.GH_PACKAGES_TOKEN }}
  #       IMAGE_REPOS: docker.io/arhatext,ghcr.io/arhat-ext
  #     run: |
  #       docker login docker.io -u="${DOCKERHUB_USERNAME}" -p="${DOCKERHUB_PASSWORD}"
  #       docker login ghcr.io/arhat-ext -u="${GITHUB_DOCKER_USERNAME}" -p="${GITHUB_DOCKER_PASSWORD}"

  #       make image.build.windows.all
  #       make image.push.windows.all
